# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JInubW0e3dzV5oPEhc4kEq7ycAnKVSj3
"""

from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load the VGG16 model without the top layers
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
num_classes = 9
# Freeze the convolutional base
base_model.trainable = False

# Add custom classification head
x = Flatten()(base_model.output)
x = Dense(256, activation='relu')(x)  # Custom dense layer
output = Dense(num_classes, activation='softmax')(x)  # Classification layer

model = Model(inputs=base_model.input, outputs=output)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Create an instance of ImageDataGenerator for data augmentation and resizing
train_datagen = ImageDataGenerator(
    rescale=1./255,                  # Normalize the images (pixel values between 0 and 1)
    rotation_range=20,               # Randomly rotate images up to 20 degrees
    width_shift_range=0.2,           # Shift the image horizontally (by 20% of total width)
    height_shift_range=0.2,          # Shift the image vertically (by 20% of total height)
    shear_range=0.2,                 # Shear transformations
    zoom_range=0.2,                  # Randomly zoom into images
    horizontal_flip=True,            # Randomly flip images horizontally
    fill_mode='nearest',             # Filling in pixels after transformation
    validation_split=0.2             # Split data for validation
)

# Resizing and augmenting training images
train_generator = train_datagen.flow_from_directory(
    r'/content/drive/MyDrive/Skin cancer ISIC The International Skin Imaging Collaboration/Train',         # Path to training data
    target_size=(224, 224),          # Resize images to 224x224
    batch_size=32,                   # Number of images per batch
    class_mode='categorical',        # For multi-class classification
    subset='training'                # Use as training data
)

# Resizing validation images (without augmentation)
validation_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
validation_generator = validation_datagen.flow_from_directory(
    r'/content/drive/MyDrive/Skin cancer ISIC The International Skin Imaging Collaboration/Test',       # Path to validation data
    target_size=(224, 224),          # Resize images to 224x224
    batch_size=32,                   # Number of images per batch
    class_mode='categorical',        # For multi-class classification
    subset='validation'              # Use as validation data
)

# To visualize one batch of augmented images:
import matplotlib.pyplot as plt

# Get a batch of augmented images
augmented_images, labels = next(train_generator)

# Plot a few augmented images
for i in range(9):
    plt.subplot(3, 3, i+1)
    plt.imshow(augmented_images[i])
    plt.axis('off')

plt.show()

history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=10,
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    validation_steps=validation_generator.samples // validation_generator.batch_size
)

base_model.trainable = True  # Unfreeze
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model again
history_fine = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=10
)

test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc}")

model.save('vgg16_skin_cancer_model.h5')